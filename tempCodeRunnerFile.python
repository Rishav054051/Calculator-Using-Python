import tkinter as tk

def button_click(symbol):
    if symbol == "=":
        try:
            result = eval(entry.get())  # Evaluate the expression
            entry.delete(0, tk.END)     # Clear the entry field
            entry.insert(tk.END, str(result))  # Display the result
        except Exception as e:
            entry.delete(0, tk.END)  # Clear the entry field
            entry.insert(tk.END, "Error")
    elif symbol == "C":
        entry.delete(0, tk.END)  # Clear the entry field
    elif symbol == "⌫":  # Backspace button
        entry.delete(len(entry.get()) - 1)
    else:
        entry.insert(tk.END, symbol)  # Append the symbol to the entry field

root = tk.Tk()
root.title("Calculator")

# Entry field to display operands and results
entry = tk.Entry(root, width=25, font=('Arial', 14))
entry.grid(row=0, column=0, columnspan=4, sticky="ew", padx=10, pady=10)  # Expand horizontally with padding

# Create a frame for buttons
button_frame = tk.Frame(root)
button_frame.grid(row=1, column=0, sticky="nsew")  # Expand in both directions

# Define buttons for digits (0-9)
for i in range(10):
    if i == 0:
        button = tk.Button(button_frame, text="0", width=5, height=2, font=('Arial', 14),
                           command=lambda t="0": button_click(t))
        button.grid(row=4, column=1, padx=5, pady=5)
    else:
        button = tk.Button(button_frame, text=str(i), width=5, height=2, font=('Arial', 14),
                           command=lambda t=str(i): button_click(t))
        button.grid(row=(i-1)//3, column=(i-1)%3, padx=5, pady=5)

# Define buttons for operators and additional functionalities
operators = ["C", "⌫", "+", "-", "*", "/", "="]
for i, operator in enumerate(operators):
    button = tk.Button(button_frame, text=operator, width=5, height=2, font=('Arial', 14),
                       command=lambda t=operator: button_click(t))
    button.grid(row=i, column=3, padx=5, pady=5)

# Configure row and column weights to make them expand when the window is resized
for i in range(5):
    button_frame.grid_rowconfigure(i, weight=1)
for i in range(4):
    button_frame.grid_columnconfigure(i, weight=1)

root.mainloop()
